{
  "scikit-hep/awkward": {
    "header-only/examples/pybind11/pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core[pyproject]\", \"pybind11\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"demo\"\nversion = \"0.0.1\"\n\ndependencies = [\n  'awkward>=2.0',\n  \"numpy\"\n]\n\n\n[tool.scikit-build]\nminimum-version = \"0.2\"\nbuild-dir = \"build/{cache_tag}\"\n"
  },
  "gromacs/gromacs": {
    "python_packaging/gmxapi/pyproject.toml": "[build-system]\nrequires = [\"mpi4py\", \"pybind11>=2.6\", \"scikit-build-core[pyproject]\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"gmxapi\"\nversion = \"0.4.1\"\ndescription = \"gmxapi Python interface for GROMACS.\"\nreadme = \"README.rst\"\nlicense = { text = \"GNU LESSER GENERAL PUBLIC LICENSE\" }\nrequires-python = \">=3.7\"\nclassifiers = [\n    \"License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)\"\n]\nauthors = [\n    { name=\"GROMACS gmxapi team\", email=\"info@gmxapi.org\" },\n]\ndependencies = [\n    \"mpi4py\",\n    \"packaging\",\n    \"networkx>=2.0\",\n    \"numpy>1.7\"\n]\n\n[project.urls]\nhomepage = \"http://gmxapi.org/\"\n\"Bug tracker\" = \"https://gitlab.com/gromacs/gromacs/-/issues/?label_name[]=gmxapi%3A%3APython\"\ndocumentation = \"https://manual.gromacs.org/current/gmxapi/index.html\"\n# The repository does not have any of the markers that identify it as a Python package.\n#repository = \"https://gitlab.com/gromacs/gromacs.git\"\n\n\n[tool.scikit-build]\n# Ref: https://scikit-build-core.readthedocs.io/en/latest/configuration.html\n\n# This provides some backward compatibility if set. Avoids surprises if default values change.\nminimum-version = \"0.2\"\n\ncmake.minimum-version = \"3.18.4\"\ncmake.build-type = \"Release\"\n\n# Include and exclude patterns, in gitignore syntax. Include overrides exclude.\n# Wheels include packages included in the sdist; CMake has the final say.\nsdist.include = [\n    \"CMakeLists.txt\",\n    \"LICENSE\",\n    \"README.rst\",\n    \"pyproject.toml\",\n    \"src/cpp\",\n    \"src/gmxapi/*.py\",\n    \"src/gmxapi/*/*.py\",\n    \"src/gmxapi/gmxconfig.json.in\",\n    \"test/pytest.ini\",\n    \"test/testdata.json\",\n    \"test/*.py\",\n]\nsdist.exclude = [\"*\"]\n\n# Make reproducible SDists (Python 3.9+ and UNIX recommended). Respects\n# SOURCE_DATE_EPOCH when true (the default).\nsdist.reproducible = true\n\n# The root-level packages to include. Special default: if not given, the package\n# is auto-discovered if it's name matches the main name.\n# We explicitly set an empty list to put CMake in charge (through `install` commands in CMakeLists.txt).\nwheel.packages = []\n"
  },
  "LuisaGroup/LuisaCompute": {
    "pyproject.toml": "[build-system]\nrequires = [\n    \"ninja\",\n    \"pybind11\",\n    \"scikit-build-core\",\n    \"distlib\",\n    \"pyproject-metadata\",\n    \"pathspec\"\n]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"luisa\"\nversion = \"0.1.6\"\ndescription = \"A High-Performance Rendering Framework with Layered and Unified Interfaces on Stream Architectures\"\nreadme = \"README_Python_en.md\"\nauthors = [\n    { name = \"LuisaGroup\" },\n]\nhomepage = \"luisa-render.com\"\nrepository = \"https://github.com/LuisaGroup/LuisaCompute\"\nrequires-python = \">=3.9\"\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n]\ndependencies = [\n    \"pybind11\",\n    \"dearpygui\",\n    \"sourceinspect\",\n    \"numpy\",\n    \"pillow\",\n    \"astpretty\"\n]\nlicense = { file = \"LICENSE\" }\n\n[tool.scikit-build]\ncmake.minimum-version = \"3.20\"\nninja.minimum-version = \"1.10\"\ncmake.args = [\n    \"-DCMAKE_INSTALL_BINDIR=.\",\n    \"-DCMAKE_INSTALL_LIBDIR=.\",\n    \"-DLUISA_COMPUTE_BUILD_TESTS=OFF\"\n]\nwheel.expand-macos-universal-tags = true\nwheel.install-dir = \"luisa\"\n"
  },
  "aewallin/opencamlib": {
    "pyproject.toml": "[project]\nname = \"opencamlib\"\nversion = \"2022.12.18\"\ndescription = \"open source computer aided manufacturing algorithms library\"\nreadme = \"README.rst\"\nauthors = [\n  { name = \"Anders Wallin\", email=\"anders.e.e.wallin@gmail.com\" }\n]\nmaintainers = [\n  { name = \"Koen Schmeets\", email=\"koen@schmeets.de\" }\n]\nlicense = { file = \"COPYING\" }\nrequires-python = \">=3.6\"\nkeywords = [\"cam\", \"cnc\", \"waterline\", \"axial tool projection\"]\n\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"Environment :: Console\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3.7\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Topic :: Scientific/Engineering :: Physics\",\n  \"Intended Audience :: Manufacturing\"\n]\n\n[project.urls]\nhomepage = \"https://github.com/aewallin/opencamlib\"\ndocumentation = \"https://github.com/aewallin/opencamlib\"\nrepository = \"https://github.com/aewallin/opencamlib\"\n\n[build-system]\nrequires = [\"scikit-build-core\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[tool.scikit-build]\ncmake.verbose = true\nlogging.level = \"DEBUG\"\nwheel.packages = [\"src/pythonlib/opencamlib\"]\n\n[tool.scikit-build.cmake.define]\nBUILD_PY_LIB = \"ON\"\nBoost_ADDITIONAL_VERSIONS = \"1.80.0;1.79.0;1.78.0;1.77.0;1.76.0;1.75.0;1.74.0;1.73.0;1.72.0;1.71.0;1.70.0\"\nBUILD_DOC = \"OFF\"\n\n[tool.cibuildwheel]\nbuild = [\"cp37*\", \"cp38*\", \"cp39*\", \"cp310*\", \"cp311*\"]\nskip = [\"pp*\", \"*-musllinux*\", \"*-manylinux_i686\"]\n\n[tool.cibuildwheel.windows]\narchs = [\"AMD64\", \"x86\", \"ARM64\"]\nbefore-all = \"cd {package} && bash ./install.sh --install-ci-deps\"\nbefore-build = \"cd {package} && bash ./install.sh --install-boost --boost-with-python --python-executable python\"\n\n[tool.cibuildwheel.linux]\narchs = [\"x86_64\", \"aarch64\"]\nbefore-all = \"cd {package} && bash ./install.sh --install-ci-deps\"\nbefore-build = \"cd {package} && bash ./install.sh --install-boost --boost-with-python --python-executable python && cp --recursive --no-clobber boost_1_80_0 /host/home/runner/work/opencamlib/opencamlib\"\n\n[tool.cibuildwheel.macos]\narchs = [\"x86_64\", \"arm64\"]\nbefore-all = \"cd {package} && bash ./install.sh --install-ci-deps\"\nbefore-build = \"cd {package} && bash ./install.sh --install-boost --boost-with-python --python-executable python\"\nrepair-wheel-command = \"python src/pythonlib/delocate-wheel.py --require-archs {delocate_archs} -w {dest_dir} -v {wheel}\"\n"
  },
  "spglib/spglib": {
    "pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core\", \"numpy\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"spglib\"\nversion = \"2.1.0-rc1\"\nrequires-python = \">=3.7\"\ndescription = \"This is the spglib module.\"\nlicense = { text = \"BSD-3-Clause\" }\nreadme = \"python/README.rst\"\n# TODO: Switch to dynamic variables scikit-build/scikit-build-core#172\n#dynamic = [\"version\", \"name\", \"description\"]\ndependencies = [\n    \"numpy\"\n]\nauthors = [\n    {name=\"Atsushi Togo\", email=\"atz.togo@gmail.com\"},\n]\nmaintainers = [\n    {name=\"Atsushi Togo\", email=\"atz.togo@gmail.com\"},\n    {name=\"Cristian Le\", email=\"git@lecris.dev\"},\n]\n\n[project.urls]\nhomepage = \"https://spglib.readthedocs.io/\"\ndocumentation = \"https://spglib.readthedocs.io/\"\nrepository = \"https://github.com/spglib/spglib\"\nchangelog = \"https://spglib.readthedocs.io/en/latest/releases.html\"\n\n[project.optional-dependencies]\ntest = [\n    \"pytest\",\n    \"pyyaml\",\n]\ndocs = [\n    \"Sphinx==4.5.0\",\n    \"sphinx-autobuild==2021.3.14\",\n    \"sphinxcontrib-bibtex==2.4.2\",\n    \"sphinx-book-theme==0.3.3\",\n    \"myst-parser==0.18.0\",\n    \"linkify-it-py==2.0.0\"\n]\ntest-cov = [\n    \"spglib[test]\",\n    \"pytest-cov\",\n]\ntest-benchmark = [\n    \"spglib[test]\",\n    \"pytest-benchmark\",\n]\ndev = [\n    \"spglib[test]\",\n    \"pre-commit\",\n]\n# Alternative names for compatibility\ndoc = [\n    \"spglib[docs]\",\n]\ntesting = [\n    \"spglib[test]\",\n]\n\n[tool.scikit-build]\nwheel.packages = [\"python/spglib\"]\nwheel.install-dir = \"spglib\"\ncmake.args = [\n    \"-DSPGLIB_WITH_Python=ON\",\n    \"-DSPGLIB_WITH_TESTS=OFF\",\n    \"-DSPGLIB_USE_OMP=OFF\",\n]\n\n[tool.cibuildwheel]\nskip = [\"pp*\", \"*-win32\", \"*-manylinux_i686\", \"*-musllinux*\", \"*-macosx_arm64\"]\ntest-extras = \"test\"\ntest-command = \"pytest {package}/python/test --benchmark-skip\"\n# Do not run test on emulated environments\ntest-skip = \"*-*linux_{aarch64,ppc64le,s390x} *-macosx_arm64 *-macosx_universal2:arm64\"\n\n[tool.cibuildwheel.linux]\n# TODO: auditwheel fails if LD_LIBRARY_PATH is not set correctly. Not sure about apprropriate value to set to\n#repair-wheel-command = \"LD_LIBRARY_PATH=. auditwheel repair --lib-sdir . -w {dest_dir} {wheel}\"\nrepair-wheel-command = \"\"\n\n[tool.cibuildwheel.macos]\n# TODO: similar to above\n#repair-wheel-command = \"DYLD_LIBRARY_PATH=. delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}\"\nrepair-wheel-command = \"\"\n\n[tool.pytest.ini_options]\naddopts = \"-m 'not benchmark'\"\ntestpaths = [\"python/test\"]\n\n[tool.coverage.run]\ncommand_line = '-m pytest --cov'\n# TODO: Cannot report relative to project path because we cannot do editable installs yet\n#source = ['python/spglib']\nsource = ['spglib']\n"
  },
  "thomasantony/llamacpp-python": {
    "pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core>=0.2.1\", \"pybind11>2.10\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"llamacpp\"\nversion = \"0.1.15\"\ndescription = \"Python bindings for @ggerganov's llama.cpp\"\nauthors = [\n    {name = \"Thomas Antony\", email= \"mail@thomasantony.com\"}\n]\nlicense = {text = \"MIT\"}\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\n\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3.7\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n]\n\n[project.urls]\nhomepage = \"https://github.com/thomasantony/llamacpp-python\"\nrepository = \"https://github.com/thomasantony/llamacpp-python\"\n\n[tool.scikit-build]\nwheel.expand-macos-universal-tags = true\ncmake.build-type = \"Release\"\n\n[project.scripts]\nllamacpp-convert = 'llamacpp.convert:main'\nllamacpp-quantize = 'llamacpp.quantize:main'\nllamacpp-cli = 'llamacpp.cli:run'\nllamacpp-chat = 'llamacpp.chat:run'\n\n[tool.cibuildwheel]\ntest-command = \"python -c \\\"import llamacpp\\\"\"\n\n# Skip Python 3.6, PyPy and 32-bit builds\nskip = [\"cp36-*\", \"pp*\", \"*-win32\", \"*-manylinux_i686\", \"*-musllinux_i686\"]\n\nbuild-verbosity = 3\ntest-skip = [\"*_arm64\", \"*_universal2:arm64\"]\n"
  },
  "zerothi/sisl": {
    "pyproject.toml": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\n# Regarding pyproject.toml see\n# - PEP 517 project metadata https://www.python.org/dev/peps/pep-0517\n# - PEP 518 project metadata https://www.python.org/dev/peps/pep-0518\n# - PEP 621 project metadata https://www.python.org/dev/peps/pep-0621\n\n# First we define the build-system which we will probably alter the most\n[build-system]\nrequires = [\n    \"setuptools_scm[toml]>=6.2\",\n    \"scikit-build-core[pyproject]\",\n    \"Cython>=0.29.28\",\n    # see https://github.com/scipy/oldest-supported-numpy/\n    # should fix #310\n    \"oldest-supported-numpy; sys_platform != 'win32'\",\n    # TODO work-arounds for windows installations where -mno-cygwin is passed\n    \"numpy==1.19.5 ; sys_platform == 'win32' and python_version <= '3.9'\",\n    \"numpy==1.21.5 ; sys_platform == 'win32' and python_version >= '3.10'\",\n]\nbuild-backend = \"scikit_build_core.build\"\n\n# Top most items are probably changed the most\n[project]\nrequires-python = \">=3.7\"\nversion = \"0.13.0\"\n\nname = \"sisl\"\ndescription = \"Manipulation and post-processing of DFT output and creating tight-binding models for NEGF transport\"\nreadme = \"README.md\"\nlicense = {text = \"MPL-2.0\"}\nkeywords = [\n    \"tight-binding\",\n    \"DFT\",\n    \"LCAO\",\n    \"NEGF\",\n    \"physics\"\n]\n\ndependencies = [\n    # TODO work-arounds for windows installations\n    \"numpy>=1.19.5 ; sys_platform == 'win32' and python_version <= '3.9'\",\n    \"numpy>=1.21.5 ; sys_platform == 'win32' and python_version >= '3.10'\",\n    \"numpy>=1.13 ; sys_platform != 'win32'\",\n    \"scipy>=1.5.0\",\n    \"netCDF4\",\n    \"pyparsing>=1.5.7\"\n]\n\nauthors = [\n    {name = \"Nick Papior\", email = \"nickpapior@gmail.com\"}\n]\nmaintainers = [{name=\"sisl developers\"}]\n\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Console\",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)\",\n    \"Programming Language :: C\",\n    \"Programming Language :: Fortran\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Topic :: Software Development\",\n    \"Topic :: Scientific/Engineering\",\n    \"Topic :: Scientific/Engineering :: Physics\",\n    \"Operating System :: OS Independent\",\n]\n\n# We purposefully get the version dynamically\ndynamic = [\"version\"]\n\n\n[tool.setuptools_scm]\nwrite_to = \"src/sisl/_version.py\"\nfallback_version = \"0.0.0.dev+$Format:%H$\"\n\n\n[tool.scikit-build]\n\nwheel.packages = [\"src/sisl\", \"src/sisl_toolbox\"]\n\n# required for dynamic metadata\nexperimental = true\n\nmetadata.version.provider = \"scikit_build_core.metadata.setuptools_scm\"\n\n# define a consistent build directory\nbuild-dir = \"build/{wheel_tag}\"\n\n# cmake and ninja stuff\ncmake.verbose = true\ncmake.minimum-version = \"3.20\"\n\n# source configuration\nsdist.reproducible = true\nsdist.include = [\"src/sisl/_version.py\", \"*/CMakeLists.txt\"]\n\n\n[project.scripts]\nsgeom = \"sisl.geometry:sgeom\"\nsgrid = \"sisl.grid:sgrid\"\nsdata = \"sisl.utils._sisl_cmd:sisl_cmd\"\nstoolbox = \"sisl_toolbox.cli:stoolbox_cli\"\n\n\n[project.urls]\nUrl = \"https://zerothi.github.io/sisl\"\nHomepage = \"https://zerothi.github.io/sisl\"\nReleases = \"https://github.com/zerothi/sisl/releases\"\nDocumentation = \"https://zerothi.github.io/sisl\"\nRepository = \"https://github.com/zerothi/sisl.git\"\nSource = \"https://github.com/zerothi/sisl\"\n\"Bug Tracker\" = \"https://github.com/zerothi/sisl/issues\"\nDiscussions = \"https://github.com/zerothi/sisl/discussions\"\nChangelog = \"https://zerothi.github.io/sisl/changelog/index.html\"\nChat = \"https://discord.gg/5XnFXFdkv2\"\n\n\n[project.optional-dependencies]\n\nanalysis = [\n    \"xarray >= 0.10.0\",\n    \"tqdm\"\n]\n\nviz = [\n    \"dill >= 0.3.2\",\n    \"pathos\",\n    \"pandas\",\n    \"xarray >= 0.10.0\",\n    \"scikit-image\",\n\n    \"plotly\",\n    \"matplotlib\",\n    \"ase\",\n]\n\nviz-plotly = [\n    \"dill >= 0.3.2\",\n    \"pathos\",\n    \"pandas\",\n    \"xarray >= 0.10.0\",\n    \"scikit-image\",\n\n    \"plotly\",\n]\n\nviz-matplotlib = [\n    \"dill >= 0.3.2\",\n    \"pathos\",\n    \"pandas\",\n    \"xarray >= 0.10.0\",\n    \"scikit-image\",\n\n    \"matplotlib\",\n]\n\nviz-blender = [\n    \"dill >= 0.3.2\",\n    \"pathos\",\n    \"pandas\",\n    \"xarray >= 0.10.0\",\n    \"scikit-image\",\n]\n\nviz-ase = [\n    \"dill >= 0.3.2\",\n    \"pathos\",\n    \"pandas\",\n    \"xarray >= 0.10.0\",\n    \"scikit-image\",\n\n    \"ase\",\n]\n\ntest = [\n    \"pytest\",\n    \"pytest-cov\",\n    \"pytest-env\",\n    \"pytest-faulthandler\",\n    \"coveralls\",\n    \"tqdm\",\n    \"dill >= 0.3.2\",\n    \"pathos\",\n    \"pandas\",\n    \"xarray >= 0.10.0\",\n    \"scikit-image\",\n    \"matplotlib\",\n    \"plotly\",\n    \"ase\"\n]\n\n\n[tool.pytest.ini_options]\ntestpaths = [\n    \"src\"\n]\nmarkers = [\n    \"slow: mark a test as slow\",\n]\n\naddopts = \"-rXs --durations=20 --cov\"\n\n[tool.coverage.run]\nsource = [\"src\"]\n\n\n[tool.pylint]\n[tool.pylint.master]\njobs = 6\nignore-paths = [\n   \".*/tests/.*.py\"\n]\n\nignore-patterns = [\n   \"conftest.py\",\n   # This is autogenerated, but may be present\n   \"_version.py\"\n]\n\n# Do not create false-positives for Cython extensions\nextension-pkg-allow-list = [\n   \"sisl._math_small\",\n   \"sisl._indices\",\n   \"sisl._lattice\",\n   \"sisl.io.siesta._siesta\",\n   \"sisl.physics._bloch\",\n   \"sisl.physics._matrix_k\",\n   \"sisl.physics._matrix_dk\",\n   \"sisl.physics._matrix_ddk\",\n\n   # external packages required\n   \"numpy\",\n   \"scipy\"\n]\n\n\n[tool.pylint.format]\n# Currently no formatting rules\n\n[tool.pylint.messages_control]\nmax-line-length = 110\n\ndisable = [\n    \"invalid-name\",\n    \"missing-module-docstring\",\n    \"redefined-builtin\"\n]\n\n\n\n[tool.tox]\n\nlegacy_tox_ini = \"\"\"\n[tox]\nminversion = 3.3.0\nenvlist = py37,py38,py39,py310\nisolated_build = True\n\n[testenv]\nsetenv =\n    SISL_NUM_PROCS=1\n    SISL_VIZ_NUM_PROCS=1\ndeps = -rdocs/requirements.txt\ncommands = pytest -s -rXs {posargs}\n\"\"\"\n\n\n# Options for cibuildwheel\n[tool.cibuildwheel]\nbuild-verbosity = \"3\"\ntest-extras = \"test\"\n# Instead of running pytest directly, we use a bash script that will set up\n# the appropiate value for the SISL_FILES_TEST variable, a path pointing to\n# the sisl-files directory, which contains files for testing.\ntest-command = \"bash {project}/tools/build_tools/test_wheel.sh {project}\"\n\n[tool.cibuildwheel.macos]\n# This is to allow building cross compilation of arm64 in macosx_x86_64\narchs = [\"x86_64\", \"universal2\",  \"arm64\"]\n\n[tool.cibuildwheel.windows]\n# Use delvewheel on windows to gather all dll files.\nbefore-build = \"pip install delvewheel\"\nrepair-wheel-command = \"delvewheel repair --no-mangle-all --ignore-in-wheel -w {dest_dir} {wheel}\"\n\n[tool.isort]\n# how should sorting be done\nsections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']\nsrc_paths = [\"src\"]\nknown_first_party = [\"sisl_toolbox\", \"sisl\"]\nline_length=90\noverwrite_in_place = true\nextend_skip = [\"src/sisl/__init__.py\"]\n\n"
  },
  "fikisipi/elkai": {
    "pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"elkai\"\nversion = \"2.0.1\"\ndescription = \"elkai is a Python library for solving travelling salesman problems (TSP) based on LKH 3\"\nurl = \"https://github.com/fikisipi/elkai\"\nauthors = [ { name = \"Filip Dimitrovski\" } ]\nrequires-python = \">=3.7\"\nreadme = \"README.md\"\nkeywords = [\"tsp\", \"travelling salesman problem\", \"solver\", \"atsp\", \"salesman\", \"travelling\", \"problem\"]\nlicense = {text = \"elkai License\"}\n"
  },
  "pybind/scikit_build_example": {
    "pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core>=0.3.3\", \"pybind11\"]\nbuild-backend = \"scikit_build_core.build\"\n\n\n[project]\nname = \"scikit_build_example\"\nversion = \"0.0.1\"\ndescription=\"A minimal example package (with pybind11)\"\nreadme = \"README.md\"\nauthors = [\n  { name = \"My Name\", email = \"me@email.com\" },\n]\nrequires-python = \">=3.7\"\nclassifiers = [\n  \"Development Status :: 4 - Beta\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3.7\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n]\n\n[project.optional-dependencies]\ntest = [\"pytest\"]\n\n\n[tool.scikit-build]\nwheel.expand-macos-universal-tags = true\n\n\n[tool.pytest.ini_options]\nminversion = \"6.0\"\naddopts = [\"-ra\", \"--showlocals\", \"--strict-markers\", \"--strict-config\"]\nxfail_strict = true\nfilterwarnings = [\"error\"]\ntestpaths = [\"tests\"]\n\n\n[tool.cibuildwheel]\ntest-command = \"pytest {project}/tests\"\ntest-extras = [\"test\"]\ntest-skip = [\"*universal2:arm64\"]\nbuild-verbosity = 1\n\n\n[tool.ruff]\nselect = [\n  \"E\", \"F\", \"W\", # flake8\n  \"B\",           # flake8-bugbear\n  \"I\",           # isort\n  \"ARG\",         # flake8-unused-arguments\n  \"C4\",          # flake8-comprehensions\n  \"EM\",          # flake8-errmsg\n  \"ICN\",         # flake8-import-conventions\n  \"ISC\",         # flake8-implicit-str-concat\n  \"G\",           # flake8-logging-format\n  \"PGH\",         # pygrep-hooks\n  \"PIE\",         # flake8-pie\n  \"PL\",          # pylint\n  \"PT\",          # flake8-pytest-style\n  \"PTH\",         # flake8-use-pathlib\n  \"RET\",         # flake8-return\n  \"RUF\",         # Ruff-specific\n  \"SIM\",         # flake8-simplify\n  \"T20\",         # flake8-print\n  \"UP\",          # pyupgrade\n  \"YTT\",         # flake8-2020\n  \"EXE\",         # flake8-executable\n  \"NPY\",         # NumPy specific rules\n  \"PD\",          # pandas-vet\n]\nextend-ignore = [\n  \"PLR\",    # Design related pylint codes\n  \"E501\",   # Line too long\n]\ntarget-version = \"py37\"\nsrc = [\"src\"]\nunfixable = [\n  \"T20\",  # Removes print statements\n  \"F841\", # Removes unused variables\n]\nflake8-unused-arguments.ignore-variadic-names = true\nisort.required-imports = [\"from __future__ import annotations\"]\n\n[tool.ruff.per-file-ignores]\n\"tests/**\" = [\"T20\"]\n"
  },
  "douglasdavis/pygram11": {
    "pyproject.toml": "# [build-system]\n# requires = [\n#   \"setuptools>=45\",\n#   \"setuptools_scm[toml]>=4.2.0\",\n#   \"scikit-build\",\n#   \"cmake\",\n#   \"ninja; platform_system!='Windows'\"\n# ]\n# build-backend = \"setuptools.build_meta\"\n\n[build-system]\nrequires = [\"scikit-build-core\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"pygram11\"\nversion = \"0.13.2\"\nreadme = \"README.md\"\ndescription = \"Fast histogramming in Python built on pybind11 and OpenMP.\"\nauthors = [\n    { name = \"Doug Davis\", email = \"ddavis@ddavis.io\" },\n]\nmaintainers = [\n    { name = \"Doug Davis\", email = \"ddavis@ddavis.io\" },\n]\nrequires-python = \">=3.8\"\ndependencies = [\"numpy\"]\nclassifiers = [\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: C++\",\n    \"Operating System :: Unix\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: POSIX\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Intended Audience :: Science/Research\",\n    \"Development Status :: 6 - Mature\",\n]\n\n[tool.pytest.ini_options]\nnorecursedirs = [\"extern\"]\ntestpaths = [\"tests\"]\naddopts = [\n    \"-v\",\n    \"-ra\",\n    \"--showlocals\",\n    \"--strict-markers\",\n    \"--strict-config\",\n]\n\n[tool.cibuildwheel]\nskip = \"pp* cp27* cp35* cp36* cp37* *-manylinux_i686 *-musllinux_i686\"\nmanylinux-x86_64-image = \"manylinux2014\"\n\ntest-command = \"pytest {package}/tests\"\ntest-skip = \"pp*macos* *universal2:arm64\"\ntest-requires = [\"pytest\", \"numpy\"]\n"
  },
  "alugowski/fast_matrix_market": {
    "python/pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core\", \"pybind11\"]\nbuild-backend = \"scikit_build_core.build\"\n\n\n[project]\nname = \"fast_matrix_market\"\nversion = \"1.5.2\"\ndescription=\"Fast and full-featured Matrix Market file I/O\"\nreadme = \"README.md\"\nauthors = [\n    { name = \"Adam Lugowski\"},\n]\nrequires-python = \">=3.7\"\n\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable \",\n    \"Intended Audience :: Science/Research\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Topic :: Software Development :: Libraries\",\n    \"Topic :: Scientific/Engineering\",\n]\n\n[project.urls]\nhomepage = \"https://github.com/alugowski/fast_matrix_market\"\n#documentation = \"https://github.com/alugowski/fast_matrix_market\"\nrepository = \"https://github.com/alugowski/fast_matrix_market\"\n\n[project.optional-dependencies]\ntest = [\"pytest\", \"scipy\"]\n\n[tool.scikit-build]\nwheel.expand-macos-universal-tags = true\n\n# Include .mtx files used by the tests\n[tool.setuptools.packages.find]\nwhere = [\"tests\"]\n\n# Include .mtx files used by the tests\n[tool.setuptools.package-data]\nmypkg = [\"*.mtx*\"]"
  },
  "ssciwr/pybind11-numpy-example": {
    "pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core\", \"pybind11\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"pybind11-numpy-example\"\nversion = \"0.0.5\"\ndescription = \"An example of using numpy with pybind11\"\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nauthors=[{name=\"Liam Keegan\", email=\"liam@keegan.ch\"}]\nrequires-python = \">=3.7\"\nclassifiers=[\n    \"Programming Language :: C++\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Operating System :: MacOS :: MacOS X\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX :: Linux\",\n    \"License :: OSI Approved :: MIT License\",\n]\n\n[project.urls]\nGithub = \"https://github.com/ssciwr/pybind11-numpy-example\"\n\n[project.optional-dependencies]\ntest = [\"pytest\", \"numpy\"]\ndocs = [\"cmake\", \"breathe\"]\n\n[tool.scikit-build.cmake.define]\nBUILD_PYTHON = \"ON\"\nBUILD_TESTING = \"OFF\"\nBUILD_DOCS = \"OFF\"\n\n[tool.cibuildwheel]\ntest-extras = \"test\"\ntest-command = \"python -m pytest {project}/python/tests -v\"\ntest-skip = \"pp* *-musllinux* *-manylinux_i686\"\n"
  },
  "henryiii/se-for-sci": {
    "content/week12/04-example/pyproject.toml": "\n[build-system]\nrequires = [\"scikit-build-core>=0.1.2\", \"pybind11>=2.10\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"minuit2\"\nversion = \"6.26.10\"\n\n[tool.scikit-build]\nexperimental = true\nwheel.install-dir = \"/null\"\n"
  },
  "jameslamb/pydistcheck": {
    "tests/data/baseballmetrics/pyproject.toml": "[project]\n\nauthors = [\n  {name = \"James Lamb\", email = \"jaylamb20@gmail.com\"}\n]\nclassifiers = [\n    \"Operating System :: Unix\",\n    \"Programming Language :: Python :: 3\"\n]\ndescription = \"test C++ package for pydistcheck\"\nmaintainers = [\n  {name = \"James Lamb\", email = \"jaylamb20@gmail.com\"}\n]\nname = \"baseballmetrics\"\nversion = \"0.1.0\"\n\n[project.urls]\nrepository = \"https://github.com/jameslamb/pydistcheck\"\n\n[build-system]\n\nrequires = [\"scikit-build-core\"]\nbuild-backend = \"scikit_build_core.build\"\n\n# based on https://github.com/scikit-build/scikit-build-core#configuration\n[tool.scikit-build]\n\ncmake.minimum-version = \"3.15\"\nninja.minimum-version = \"1.5\"\nninja.make-fallback = true\ncmake.args = []\ncmake.verbose = true\ncmake.build-type = \"Release\"\nlogging.level = \"INFO\"\nsdist.reproducible = true\nwheel.py-api = \"py3\"\nexperimental = true\nstrict-config = true\nminimum-version = \"0.1.5\"\n"
  },
  "SideChannelMarvels/BlueGalaxyEnergy": {
    "pyproject.toml": "[build-system]\n# cf https://github.com/scikit-build/scikit-build-core\nrequires = [\"scikit-build-core\", \"pybind11\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"bluegalaxyenergy\"\nversion = \"1.0.1\"\ndescription=\"A tool to perform the so-called BGE attack\"\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nlicense = {file = \"LICENSE.txt\"}\nauthors = [\n  {name = \"Laurent Gr\u00e9my\"},\n  {name = \"Nicolas Surbayrole\"},\n  {name = \"Philippe Teuwen\"},\n]\n\n[project.urls]\nrepository = \"https://github.com/SideChannelMarvels/BlueGalaxyEnergy\"\n\n[tool.scikit-build]\nwheel.expand-macos-universal-tags = true\nninja.make-fallback = true\nstrict-config = true\n"
  },
  "JeanElsner/panda_model": {
    "pyproject.toml": "[build-system]\nrequires = [\"scikit-build-core\", \"pybind11\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"panda-model\"\ndescription = \"panda-model allows the offline use of the Model class from libfranka in Python and C++.\"\nversion = \"0.2.0\"\nrequires-python = \">=3.7\"\nauthors = [\n    { name = \"Jean Elsner\", email = \"jean.elsner@tum.de\" },\n]\ndependencies = [\n  'numpy'\n]\nlicense = {file = \"LICENSE\"}\nreadme = \"README.md\"\nkeywords = [\"python\", \"robotics\", \"panda\", \"libfranka\", \"dynamics\", \"franka\", \"emika\", \"jacobian\", \"model\", \"control\", \"simulation\", \"robot-manipulator\"]\n\nclassifiers = [\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Topic :: Scientific/Engineering\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n]\n\n[project.optional-dependencies]\n\ntest = [\n    \"pytest\"\n]\n\n[project.urls]\nhomepage = \"https://github.com/JeanElsner/panda_model\"\ndocumentation = \"https://panda-model.readthedocs.io\"\nrepository = \"https://github.com/JeanElsner/panda_model\"\n\n[tool.scikit-build]\ncmake.build-type = \"Release\"\n\n[tool.scikit-build.cmake.define]\nBUILD_PYTHON = \"ON\"\n\n[project.scripts]\npanda-model-download = \"panda_model.download:run\"\n\n[tool.cibuildwheel]\nmanylinux-x86_64-image = \"manylinux2014\"\nbuild = [\"cp37-*\", \"cp38-*\", \"cp39-*\", \"cp310-*\", \"cp311-*\"]\nskip = [\"pp*\", \"*musllinux*\"]\ntest-command = \"pytest {package}/tests/test_without_fci.py\"\ntest-extras = [\"test\"]\n\n[tool.cibuildwheel.linux]\nbefore-all = \"yum install -y eigen3-devel poco-devel\"\narchs = [\"x86_64\"]\n"
  }
}
